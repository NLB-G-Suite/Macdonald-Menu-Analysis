)
marker = list(color = brewer.pal(9, "Set1"))
p <- plot_ly(
x = menu$Category,
marker = list(color = '#45171D'),
type = "histogram"
)%>%
layout(         xaxis = list(title = ""),
yaxis = list(title = ""),
autosize = T)
p
d1<-menu%>%ggplot(aes(x=Sugars,y=Calories))+stat_density_2d(geom = "polygon", aes(fill = ..level..), h=c(100,1500) ,contour = TRUE)+scale_fill_viridis(option="magma")
d2<-menu%>%ggplot(aes(x=Carbohydrates,y=Calories))+stat_density_2d(geom = "tile", aes(fill = ..density..), h=c(100,1500) ,contour = FALSE)+scale_fill_viridis(option="magma")
d3<-menu%>%ggplot(aes(x=Sodium,y=Calories))+stat_density_2d(geom = "tile", aes(fill = ..density..), h=c(3000,1500) ,contour = FALSE)+scale_fill_viridis(option="magma")
d4<-menu%>%ggplot(aes(x=Cholesterol,y=Calories))+stat_density_2d(geom = "tile", aes(fill = ..density..), h=c(600,1500) ,contour = FALSE)+scale_fill_viridis(option="magma")
d5<-menu%>%ggplot(aes(x=Dietary.Fiber,y=Protein))+scale_x_continuous(limits=c(0,8),expand=c(0,0))+stat_density_2d(geom = "tile", aes(fill = ..density..), h=c(5,70) ,contour = FALSE)+scale_fill_viridis(option="magma")
grid.arrange(d1,d2,d3,d4,d5,nrow=3,ncol=2)
grid.arrange(d1,d2,d3,d4,d5,nrow=3,ncol=2)
p <- plot_ly(menu,x = ~Calories,
type = "histogram",
histnorm = "probability",name="Calorie",alpha=0.6)%>%
add_histogram(x = ~Calories.from.Fat,name="Calorie From Fat",alpha=0.6) %>%
layout(barmode = "overlay")
p
new_col<-c("grey50", "blue","hotpink","Magenta","seagreen","violet","brown","maroon","navyblue")
plot_ly(x = menu$Category, y=menu$Calories,color = menu$Category,colors =new_col , type = "box")%>%   layout(
xaxis = list(title = ""),
yaxis = list(title = "Calories"),
showlegend=FALSE,
autosize = T)
plot_ly(x = menu$Category, y=menu$Protein,color = menu$Category,colors =new_col , type = "box")%>% layout(
xaxis = list(title = ""),
yaxis = list(title = ""),
showlegend=FALSE,
autosize = T)
library(ggrepel)
menu %>% select(Category,Item,Protein,Total.Fat)%>%arrange(desc(Protein))%>%filter(Category =="Chicken & Fish")%>%ggplot(aes(x=Item,y=Protein,col=Item))+geom_point(size=3)+theme(legend.position = "none",axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+geom_label_repel(aes(label=substr(Item,1,20)),size=2)+labs(title="High Protein/Fat Item in Chicken & Fish Category")+geom_bar(aes(y=Total.Fat),alpha=0.5,stat="identity")
library(ggrepel)
menu %>% select(Category,Item,Protein,Total.Fat)%>%arrange(desc(Protein))%>%filter(Category =="Chicken & Fish")%>%ggplot(aes(x=Item,y=Protein,col=Item))+geom_point(size=3)+theme(legend.position = "none",axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+geom_label_repel(aes(label=substr(Item,1,20)),size=2)+labs(title="High Protein/Fat Item in Chicken & Fish Category")+geom_bar(aes(y=TotalFat),alpha=0.5,stat="identity")
library(ggrepel)
menu %>% select(Category,Item,Protein,TotalFat)%>%arrange(desc(Protein))%>%filter(Category =="Chicken & Fish")%>%ggplot(aes(x=Item,y=Protein,col=Item))+geom_point(size=3)+theme(legend.position = "none",axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+geom_label_repel(aes(label=substr(Item,1,20)),size=2)+labs(title="High Protein/Fat Item in Chicken & Fish Category")+geom_bar(aes(y=TotalFat),alpha=0.5,stat="identity")
plot_ly(x = menu$Category, y=menu$Carbohydrates,color = menu$Category,colors =new_col , type = "box") %>% layout(
xaxis = list(title = ""),
yaxis = list(title = ""),
showlegend=FALSE,
autosize = T)
p<-plot_ly(x=menu$Calories, y=menu$Carbohydrates, type="scatter", mode = "markers" ,
marker=list( color=ifelse(menu$Calories>500,"red","blue") , opacity=0.5 , size=20) )
p
plot_ly(x = menu$Category, y=menu$Total.Fat,color = menu$Category,colors =new_col , type = "box") %>% layout(
xaxis = list(title = ""),
yaxis = list(title = ""),
showlegend=FALSE,
autosize = T)
{r echo=FALSE}
m1<-menu%>%select(Total.Fat,Calories.from.Fat,Saturated.Fat)
m2<-as.matrix(m1)
colnames(m2)<-NULL
#m2
p <- plot_ly(z=~m2) %>% add_surface()%>%layout(scene = list(xaxis = list(title = 'Total.Fat'),
yaxis = list(title = 'Calories from Fat'),
zaxis = list(title = 'Saturated Fat')))
p
{r echo=FALSE}
m1<-menu%>%select(TotalFat,Calories.from.Fat,Saturated.Fat)
m2<-as.matrix(m1)
colnames(m2)<-NULL
#m2
p <- plot_ly(z=~m2) %>% add_surface()%>%layout(scene = list(xaxis = list(title = 'Total.Fat'),
yaxis = list(title = 'Calories from Fat'),
zaxis = list(title = 'Saturated Fat')))
p
m1<-menu%>%filter(Category %in% c("Beef & Pork","Chicken & Fish"))%>%arrange(desc(Total.Fat....Daily.Value.,Saturated.Fat....Daily.Value.,Trans.Fat))
p <- plot_ly(m1, x = ~factor(Item,levels=Item), y = ~Total.Fat....Daily.Value., name = 'Total Fat DV', type = 'scatter', mode = 'lines+markers', width = 2,color = I('red')) %>%
add_trace(y = ~Saturated.Fat....Daily.Value., name = 'Saturated Fat DV',color=I('blue')) %>%
add_trace(y = ~Trans.Fat, name = 'Trans Fat',color=I("hotpink")) %>%
layout(title = 'Camparing Fat in Items',
xaxis = list(title = "",
showgrid = FALSE),
yaxis = list(title = "value",
showgrid = FALSE),
legend=list(orientation="r",xanchor="center"))
p
dat<-menu %>% select(Category,Sodium)%>% group_by(Category)%>%summarise(tsodium=sum(Sodium))
dat
dat$fraction = dat$tsodium / sum(dat$tsodium)
dat = dat[order(dat$fraction), ]
dat$ymax = cumsum(dat$fraction)
dat$ymin = c(0, head(dat$ymax, n=-1))
p1 = ggplot(dat, aes(fill=Category, ymax=ymax, ymin=ymin, xmax=9, xmin=3)) +
geom_rect() +
coord_polar(theta="y") +
xlim(c(0, 9)) +
theme(panel.grid=element_blank()) +
theme(axis.text=element_blank()) +
theme(axis.ticks=element_blank()) +
annotate("text", x = 0, y = 0, label = "Sodium") +
labs(title="Sodium content in Category")
p1
plot_ly(x = menu$Category, y=menu$Sugars,color = menu$Category,colors =new_col , type = "bar") %>% layout(title = "Sugars",
xaxis = list(title = ""),
yaxis = list(title = ""),
showlegend=FALSE,
autosize = T)
```
library(stringr)
ss<-menu%>%select(Category,Item,Sugars,Serving.Size,Sugars)%>%filter(Category=="Smoothies & Shakes")
ss$size<-NULL
ss$size[str_detect(ss$Item,"Small")]<-"Small"
ss$size[str_detect(ss$Item,"Medium")]<-"Medium"
ss$size[str_detect(ss$Item,"Large")]<-"Large"
ss$size[str_detect(ss$Item,"Snack")]<-"Snack"
ss%>%filter(!size == "Snack")%>%arrange(desc(Sugars))%>%ggplot(aes(x=factor(Item,level=Item),y=Sugars,group=size,fill=size))+
geom_bar(stat="identity",position="dodge",alpha=0.7)+theme(axis.text.x = element_text(angle=90))+coord_flip()+
labs(x="Item",title="Sugar content in Smoothies & Shakes")
menu %>% arrange(desc(Cholesterol....Daily.Value.))%>%plot_ly( x = ~factor(Item,levels=Item), y = ~Cholesterol, type="scatter",color=~Item, size=~Cholesterol,colors='Paired',mode = "markers" , marker=list( opacity=0.7) ) %>%
add_trace(x = ~factor(Item,levels=Item), y = ~Cholesterol....Daily.Value., modee="lines",  yaxis = "y2", name = "Cholestrol DV",color=I('red'),line=list(opacity=0.7)) %>%
layout(yaxis2 = list(overlaying = "y", side = "left",title="Cholesterol DV"),
title = "Cholesterol Content",
xaxis = list(title = ""),
yaxis = list(title = "Total Cholestrol",side="right"),
showlegend=FALSE,autosize = T,margin = list(
pad = 30, b = 90, l = 60, r = 80
))
ch<-menu %>% select(Category,Item,Cholesterol)%>% arrange(desc(Cholesterol))%>%head(25)
p1<-plot_ly(ch, x=factor(ch$Item,level=ch$Item),y=ch$Cholesterol,color=ch$Category,type="bar")%>%layout(title="Cholestrol Rich Items",height=400)
ch1<-menu %>% select(Category,Item,Cholesterol)%>% arrange(desc(Cholesterol))%>%filter(Cholesterol >5 & Cholesterol<25)
p2<-plot_ly(ch1, x=factor(ch1$Item,level=ch1$Item),y=ch1$Cholesterol,color=ch1$Category,type="bar")%>%layout(title="Cholestrol Low Items",height=400)
ggplotly(p1)
ggplotly(p2)
menu %>%
plot_ly( x = menu$Item, y = menu$Dietary.Fiber....Daily.Value., type="scatter", mode = "markers" , marker=list( color=colorRampPalette(brewer.pal(30,"Spectral"))(100) , opacity=0.7 , size=~Dietary.Fiber....Daily.Value.) ) %>% layout(title = "Dietry Fibre Daily Content ",
xaxis = list(title = ""),
yaxis = list(title = "Daily Dietary fibre"),
showlegend=FALSE,autosize = F, width = 1000, height = 400,margin=m)
menu%>%group_by(Category)%>%summarise(vitc=sum(Vitamin.C....Daily.Value.))%>% plot_ly(labels = ~Category, values = ~vitc) %>%
add_pie(hole = 0.3,textinfo = 'label+percent',marker = list(colors = new_col,
line = list(color = '#FFFFFF', width = 1))) %>%
layout(title = "Categories & Vitamin C %",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
vitc<-menu%>% select(Item,Vitamin.C....Daily.Value.,Category)%>%group_by(Item,Category)%>%summarise(c=mean(Vitamin.C....Daily.Value.))%>%arrange(desc(c))%>%head(10)
p <- plot_ly(vitc, labels = ~Item, values = ~c, type = 'pie',
textinfo = 'label+percent',
textposition='inside',marker = list(colors = new_col,
line = list(color = '#FFFFFF', width = 1))) %>%
layout(title = 'Top 10 Items which are rich in Vitamin C',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p
p <- plot_ly(menu, r = ~Iron....Daily.Value., t = ~Calories)%>% add_area(color = ~Category)
layout(p, radialaxis = list(ticksuffix = "%"), orientation = 270)
c<-16.3
m<-20.5
w<-18.9
menu %>% select(Category,Item,Iron....Daily.Value.)%>%arrange(desc(Iron....Daily.Value.))%>%filter(Iron....Daily.Value.>=15)%>%ggplot(aes(x=substr(Item,1,15),y=Iron....Daily.Value.,col=Category,size=Iron....Daily.Value.))+geom_point(fill="red")+theme(axis.text.x = element_text(angle=90),legend.position="bottom")+geom_hline(yintercept =c,col="red",linetype="dashed")+geom_text(aes( 0, c, label = "Children",vjust=-1,hjust=0,col="red"), size = 3)+geom_hline(yintercept =m,col="blue",linetype="dashed")+geom_text(aes( 0, m, label = "Men",vjust=-1,hjust=0), size = 3,col="blue")+geom_hline(yintercept =w,col="green",linetype="dashed")+geom_text(aes( 0, w, label = "Women",vjust=-0.5,hjust=0), size = 3,col="green")+labs(title="Mcdonald's Item -Daily requirement of Iron",x="Item")
options(repr.plot.width=10, repr.plot.height=50)
avg_cal<-mean(menu$Calcium....Daily.Value.)
cal<-menu %>% select(Category,Item,Calcium....Daily.Value.)%>%arrange(desc(Calcium....Daily.Value.))%>%filter(! Category %in% c("Coffee & Tea","Smoothies & Shakes","Beverages","Desserts") )
cal$level1<-ifelse(cal$Calcium....Daily.Value.>avg_cal,"Above Avg","Below Avg")
cal<-cal[order(cal$Calcium....Daily.Value.),]
#cal$Item<-substr(cal$Item,1,20)
ggplot(cal, aes(x=factor(cal$Item,levels=cal$Item), y=Calcium....Daily.Value.)) +
geom_bar(stat='identity',aes(fill=level1),width=.5)  +
coord_flip()+
scale_fill_manual(name="Calcium",
labels = c("Above Average", "Below Average"),
values = c("Above Avg"="red4", "Below Avg"="green4")) +labs(title="Daily calcium in other than milk Items",x="item")
menu %>% filter(Item %in% c("Egg McMuffin","Big Mac","Chicken McNuggets (10 piece)","Large French Fries","Baked Apple Pie","Double Cheeseburger"))%>%
select(Item,Cholesterol....Daily.Value.,Sodium....Daily.Value.,Carbohydrates....Daily.Value.,Dietary.Fiber....Daily.Value.,Vitamin.A....Daily.Value.,
Calcium....Daily.Value.,Iron....Daily.Value.,Total.Fat....Daily.Value.,Saturated.Fat....Daily.Value.)%>%
gather(nut,value,2:10)%>%ggplot(aes(x="",y=value,fill=nut))+geom_bar(stat="identity",width=1)+
coord_polar(theta = "y", start=0)+facet_wrap(~Item)+theme(legend.position = "bottom",legend.text=element_text(size=5))+labs(title="Nutritive values in most popular items",fill="Nutrients")
g1<-menu%>%ggplot(aes(x=Cholesterol,y=Calories))+geom_point(col="hotpink")+geom_smooth(method="lm",col="hotpink")
g2<-menu%>%ggplot(aes(x=Carbohydrates,y=Calories))+geom_point(col="navyblue")+geom_smooth(method="lm",col="navyblue")
g3<-menu%>%ggplot(aes(x=Total.Fat,y=Calories))+geom_point(col="magenta")+geom_smooth(method="lm",col="magenta")
g3<-menu%>%ggplot(aes(x=Sugars,y=Calories))+geom_point(col="darkorchid4")+geom_smooth(method="lm",col="darkorchid4")
g4<-menu%>%ggplot(aes(x=Protein,y=Calories))+geom_point(col="firebrick4")+geom_smooth(method="lm",col="firebrick4")
g5<-menu%>%ggplot(aes(x=Sodium,y=Calories))+geom_point(col="olivedrab4")+geom_smooth(method="lm",col="olivedrab4")
g6<-menu%>%ggplot(aes(x=Saturated.Fat,y=Calories))+geom_point(col="orange4")+geom_smooth(method="lm",col="orange4")
g7<-menu%>%ggplot(aes(x=Dietary.Fiber,y=Calories))+geom_point(col="tomato4")+geom_smooth(method="lm",col="tomato4")
g8<-menu%>%ggplot(aes(x=Trans.Fat,y=Calories))+geom_point(col="slateblue4")+geom_smooth(method="lm",col="slateblue4")
grid.arrange(g1,g2,g3,g4,g5,g6,g7,g8,nrow=3,ncol=3)
p <- plot_ly(menu, x = ~Sugars, y = ~Carbohydrates, z = ~Calories, marker = list(color = ~Calories , colorscale = c('#FF34A1', '#683531'), showscale = TRUE)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Sugar'),
yaxis = list(title = 'Carbohydrates'),
zaxis = list(title = 'Calorie')))
p
shiny::runApp()
runApp()
runApp()
runApp()
d1<-menu%>%ggplot(aes(x=Sugars,y=Calories))+stat_density_2d(geom = "polygon", aes(fill = ..level..), h=c(100,1500) ,contour = TRUE)+scale_fill_viridis(option="magma")
d2<-menu%>%ggplot(aes(x=Carbohydrates,y=Calories))+stat_density_2d(geom = "tile", aes(fill = ..density..), h=c(100,1500) ,contour = FALSE)+scale_fill_viridis(option="magma")
d3<-menu%>%ggplot(aes(x=Sodium,y=Calories))+stat_density_2d(geom = "tile", aes(fill = ..density..), h=c(3000,1500) ,contour = FALSE)+scale_fill_viridis(option="magma")
d4<-menu%>%ggplot(aes(x=Cholesterol,y=Calories))+stat_density_2d(geom = "tile", aes(fill = ..density..), h=c(600,1500) ,contour = FALSE)+scale_fill_viridis(option="magma")
d5<-menu%>%ggplot(aes(x=Dietary.Fiber,y=Protein))+scale_x_continuous(limits=c(0,8),expand=c(0,0))+stat_density_2d(geom = "tile", aes(fill = ..density..), h=c(5,70) ,contour = FALSE)+scale_fill_viridis(option="magma")
grid.arrange(d1,d2,d3,d4,d5,nrow=3,ncol=2)
runApp()
d1<-menu%>%ggplot(aes(x=Sugars,y=Calories))+stat_density_2d(geom = "polygon", aes(fill = ..level..), h=c(100,1500) ,contour = TRUE)+scale_fill_viridis(option="magma")
d2<-menu%>%ggplot(aes(x=Carbohydrates,y=Calories))+stat_density_2d(geom = "tile", aes(fill = ..density..), h=c(100,1500) ,contour = FALSE)+scale_fill_viridis(option="magma")
d3<-menu%>%ggplot(aes(x=Sodium,y=Calories))+stat_density_2d(geom = "tile", aes(fill = ..density..), h=c(3000,1500) ,contour = FALSE)+scale_fill_viridis(option="magma")
d4<-menu%>%ggplot(aes(x=Cholesterol,y=Calories))+stat_density_2d(geom = "tile", aes(fill = ..density..), h=c(600,1500) ,contour = FALSE)+scale_fill_viridis(option="magma")
d5<-menu%>%ggplot(aes(x=Dietary.Fiber,y=Protein))+scale_x_continuous(limits=c(0,8),expand=c(0,0))+stat_density_2d(geom = "tile", aes(fill = ..density..), h=c(5,70) ,contour = FALSE)+scale_fill_viridis(option="magma")
grid.arrange(d1,d2,d3,d4,d5,nrow=3,ncol=2)
d4
runApp()
d1
runApp()
p <- plot_ly(menu,x = ~Calories,
type = "histogram",
histnorm = "probability",name="Calorie",alpha=0.6)%>%
add_histogram(x = ~Calories.from.Fat,name="Calorie From Fat",alpha=0.6) %>%
layout(barmode = "overlay")
p
runApp()
shiny::runApp()
install.packages("plotly")
install.packages("plotly")
runApp()
install.packages("plotly")
install.packages("plotly")
shiny::runApp()
new_col<-c("grey50", "blue","hotpink","Magenta","seagreen","violet","brown","maroon","navyblue")
plot_ly(x = menu$Category, y=menu$Calories,color = menu$Category,colors =new_col , type = "box")%>% layout(
xaxis = list(title = ""),
yaxis = list(title = "Calories"),
showlegend=FALSE,
autosize = T)
})
plot_ly(x = menu$Category, y=menu$Calories,color = menu$Category,colors =new_col , type = "box")%>% layout(
xaxis = list(title = ""),
yaxis = list(title = "Calories"),
showlegend=FALSE,
autosize = T)
})
plot_ly(x = menu$Category, y=menu$Calories,color = menu$Category,colors =new_col , type = "box")%>% layout(
xaxis = list(title = ""),
yaxis = list(title = "Calories"),
showlegend=FALSE,
autosize = T)
runApp()
runApp()
plot_ly(x = menu$Category, y=menu$Protein,color = menu$Category,colors =new_col , type = "box")%>% layout(
xaxis = list(title = ""),
yaxis = list(title = ""),
showlegend=FALSE,
autosize = T)
runApp()
library(ggrepel)
menu %>% select(Category,Item,Protein,Total.Fat)%>%arrange(desc(Protein))%>%filter(Category =="Chicken & Fish")%>%ggplot(aes(x=Item,y=Protein,col=Item))+geom_point(size=3)+theme(legend.position = "none",axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+geom_label_repel(aes(label=substr(Item,1,20)),size=2)+labs(title="High Protein/Fat Item in Chicken & Fish Category")+geom_bar(aes(y=Total.Fat),alpha=0.5,stat="identity")
menu %>% select(Category,Item,Protein,TotalFat)%>%arrange(desc(Protein))%>%filter(Category =="Chicken & Fish")%>%ggplot(aes(x=Item,y=Protein,col=Item))+geom_point(size=3)+theme(legend.position = "none",axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+geom_label_repel(aes(label=substr(Item,1,20)),size=2)+labs(title="High Protein/Fat Item in Chicken & Fish Category")+geom_bar(aes(y=TotalFat),alpha=0.5,stat="identity")
runApp()
lm <- lm (TotalFat~. , data = train)
lm
runApp()
hanx<-createDataPartition(mcd_n$Total.Fat, p=.7, list = F)
hanx<-createDataPartition(mcd_n$Total.Fat, p=.7, list = F)
lm <- lm (Total.Fat~. , data = train)
lm <- lm (mcd_n$Total.Fat~. , data = train)
lm<-lm(Category~., data = Train)
lm<-lm(Tottal.Fat~., data = Train)
lm<-lm(TottalFat~., data = Train)
lm <- lm (TotalFats~. , data = train)
lm
predict_class<-predict(lm, Test, type="class")
onfusionMatrix(predict_class, Test$Category)
confusionMatrix(predict_class, Test$Category)
predict_class2<-predict(lm, Test, type="class")
confusionMatrix(predict_class2, Test$TotalFat)
predict_class2<-predict(lm, Test, type="class")
confusionMatrix(predict_class, Test$Category)
predict_class2<-predict(lm, Test, type="class")
hanx<-createDataPartition(mcd_n$Total.Fat, p=.7, list = F)
str(mcd_n)
mcd_n$Total.Fat....Daily.Value. <- NULL
mcd_n$Sodium....Daily.Value. <- NULL
mcd_n$Dietary.Fiber....Daily.Value. <- NULL
mcd_n$Cholesterol....Daily.Value. <- NULL
mcd_n$Saturated.Fat....Daily.Value. <- NULL
mcd_n$Carbohydrates....Daily.Value. <- NULL
mcd_n$Serving.Size <- NULL
mcd_n$Item <- NULL
set.seed(1)
hanx<-createDataPartition(mcd_n$Total.Fat, p=.7, list = F)
hanx<-createDataPartition(mcd_n$Calories, p=.7, list = F)
View(hanx)
remove(hanx)
str(mcd_n)
mcd_n$Sodium....Daily.Value. <- NULL
mcd_n$Dietary.Fiber....Daily.Value. <- NULL
mcd_n$Cholesterol....Daily.Value. <- NULL
mcd_n$Saturated.Fat....Daily.Value. <- NULL
mcd_n$Carbohydrates....Daily.Value. <- NULL
mcd_n$Serving.Size <- NULL
mcd_n$Item <- NULL
set.seed(1)
hanx<-createDataPartition(mcd_n$Total.Fat, p=.7, list = F)
hanx<-createDataPartition(mcd_n$Category, p=.7, list = F)
hanx<-createDataPartition(mcd_n$Item, p=.7, list = F)
remover
remove(mcd_n)
mcd_n$Sodium....Daily.Value. <- NULL
mcd_n$Dietary.Fiber....Daily.Value. <- NULL
mcd_n$Cholesterol....Daily.Value. <- NULL
mcd_n$Saturated.Fat....Daily.Value. <- NULL
mcd_n$Carbohydrates....Daily.Value. <- NULL
mcd_n$Serving.Size <- NULL
mcd_n$Item <- NULL
set.seed(1)
str(mcd_n)
mcd_n<-read.csv("menu.csv")
str(mcd_n)
mcd_n$Sodium....Daily.Value. <- NULL
mcd_n$Dietary.Fiber....Daily.Value. <- NULL
mcd_n$Cholesterol....Daily.Value. <- NULL
mcd_n$Saturated.Fat....Daily.Value. <- NULL
mcd_n$Carbohydrates....Daily.Value. <- NULL
mcd_n$Serving.Size <- NULL
set.seed(1)
hanx<-createDataPartition(mcd_n$Item, p=.7, list = F)
hanx<-createDataPartition(mcd_n$TotalFat, p=.7, list = F)
Train<-mcd_n[hanx,]
Test<-mcd_n[-hanx,]
lm <- lm (mcd_n$TotalFat~. , data = train)
hanx<-createDataPartition(mcd_n$TotalFat, p=.7, list = F)
lm <- lm (mcd_n$TotalFat~. , data = train)
runApp()
lm <- lm (TotalFat~. , data = train)
predict_class2 <- predict(lm, Test, type="class")
predict_class<-predict(model, Test, type="class")
lm <- lm (TotalFat~. , data = train)
predict_class2 <- predict(lm, Test, type="class")
confusionMatrix(predict_class2, Test$TotalFat)
shiny::runApp()
plot5 <- ggplot(myData4, aes(x=(9*TotalFat+4*Carbohydrates+4*Protein)/Serving.Size,y=water, color=Category))+
geom_point()+
xlab("specific calory content [kcal/g]")+ylab("water [%]")+
stat_smooth(method = "lm", col = "red")+
plot5
plot5 <- ggplot(myData4, aes(x=(9*TotalFat+4*Carbohydrates+4*Protein)/Serving.Size,y=water, color=Category))+
geom_point()+
xlab("specific calory content [kcal/g]")+ylab("water [%]")+
stat_smooth(method = "lm", col = "red")
runApp()
plot5
runApp()
shiny::runApp()
pred_rf <- predict(model_rf, test)
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
colnames(menu)
menu$'Total.Fat....Daily.Value.' <- NULL
menu$'Saturated.Fat....Daily.Value.' <- NULL
menu$'Cholesterol....Daily.Value.' <- NULL
menu$'Sodium....Daily.Value.' <- NULL
menu$'Carbohydrates....Daily.Value.' <- NULL
menu$'Dietary.Fiber....Daily.Value.' <- NULL
menu$Item <- NULL
menu$Serving.Size <- NULL
str(menu)
levels(menu$Category)
set.seed(1)
index <- createDataPartition(menu$Category, p=0.8, list=FALSE)
train <- menu[index,]
test <- menu[-index,]
model <- rpart(Category~., data=train)
prp(model, type=1, extra=2)
pred_dt <- predict(model, test, type="class")
confusionMatrix(pred_dt, test$Category)
model_rf <- randomForest(Category~., train, ntree=50)
varImpPlot(model_rf)
pred_rf <- predict(model_rf, test)
confusionMatrix(pred_rf, test$Category)
runApp()
remove(pred_rf)
runApp()
pred_rf <- predict(model_rf, test)
confusionMatrix(pred_rf, test$Category)
runApp()
remove(train)
remove(test)test
remove(test)
remove(test)
runApp()
str(mcd_n)
mcd_n$Total.Fat....Daily.Value. <- NULL
mcd_n$Sodium....Daily.Value. <- NULL
mcd_n$Dietary.Fiber....Daily.Value. <- NULL
mcd_n$Cholesterol....Daily.Value. <- NULL
mcd_n$Saturated.Fat....Daily.Value. <- NULL
mcd_n$Carbohydrates....Daily.Value. <- NULL
mcd_n$Serving.Size <- NULL
mcd_n$Item <- NULL
library(caret)
set.seed(1)
hanx<-createDataPartition(mcd_n$Category, p=.7, list = F)
Train<-mcd_n[hanx,]
Test<-mcd_n[-hanx,]
library(rpart)
library(rpart.plot)
model<-rpart(Category~., data = Train)
prp(model, type=1, extra = 3, main="Decision Tree")
library(caret)
predict_class<-predict(model, Test, type="class")
confusionMatrix(predict_class, Test$Category)
runApp()
str(mcd_n)
mcd_n$Total.Fat....Daily.Value. <- NULL
mcd_n$Sodium....Daily.Value. <- NULL
mcd_n$Dietary.Fiber....Daily.Value. <- NULL
mcd_n$Cholesterol....Daily.Value. <- NULL
mcd_n$Saturated.Fat....Daily.Value. <- NULL
mcd_n$Carbohydrates....Daily.Value. <- NULL
mcd_n$Serving.Size <- NULL
mcd_n$Item <- NULL
library(caret)
set.seed(1)
hanx<-createDataPartition(mcd_n$Category, p=.7, list = F)
Train<-mcd_n[hanx,]
Test<-mcd_n[-hanx,]
library(rpart)
library(rpart.plot)
model<-rpart(Category~., data = Train)
prp(model, type=1, extra = 3, main="Decision Tree")
library(caret)
predict_class<-predict(model, Test, type="class")
confusionMatrix(predict_class, Test$Category)
runApp()
pred_rf <- predict(model_rf, test)
confusionMatrix(pred_rf, test$Category)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
mcd_n<-read.csv("..menu.csv")
mcd_n<-read.csv("menu.csv")
str(mcd_n)
mcd_n$Total.Fat....Daily.Value. <- NULL
mcd_n$Sodium....Daily.Value. <- NULL
mcd_n$Dietary.Fiber....Daily.Value. <- NULL
mcd_n$Cholesterol....Daily.Value. <- NULL
mcd_n$Saturated.Fat....Daily.Value. <- NULL
mcd_n$Carbohydrates....Daily.Value. <- NULL
mcd_n$Serving.Size <- NULL
mcd_n$Item <- NULL
library(caret)
set.seed(1)
hanx<-createDataPartition(mcd_n$Category, p=.7, list = F)
Train<-mcd_n[hanx,]
Test<-mcd_n[-hanx,]
library(rpart)
library(rpart.plot)
model<-rpart(Category~., data = Train)
prp(model, type=1, extra = 3, main="Decision Tree")
library(caret)
predict_class<-predict(model, Test, type="class")
confusionMatrix(predict_class, Test$Category)
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
colnames(menu)
menu$'Total.Fat....Daily.Value.' <- NULL
menu$'Saturated.Fat....Daily.Value.' <- NULL
menu$'Cholesterol....Daily.Value.' <- NULL
menu$'Sodium....Daily.Value.' <- NULL
menu$'Carbohydrates....Daily.Value.' <- NULL
menu$'Dietary.Fiber....Daily.Value.' <- NULL
menu$Item <- NULL
menu$Serving.Size <- NULL
str(menu)
levels(menu$Category)
set.seed(1)
index <- createDataPartition(menu$Category, p=0.8, list=FALSE)
train <- menu[index,]
test <- menu[-index,]
model <- rpart(Category~., data=train)
prp(model, type=1, extra=2)
pred_dt <- predict(model, test, type="class")
confusionMatrix(pred_dt, test$Category)
model_rf <- randomForest(Category~., train, ntree=50)
varImpPlot(model_rf)
pred_rf <- predict(model_rf, test)
confusionMatrix(pred_rf, test$Category)
runApp()
runApp()
runApp()
install.packages(dplyr)
runApp()
runApp()
runApp()
menu <- read.csv("menu.csv")
runApp()
